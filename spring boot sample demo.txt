package com.stackroute.model;

import javax.persistence.Entity;
import javax.persistence.Id;

/* Annotate the class with @Entity annotation*/
@Entity
public class Employee {

	/* id is annotated with @Id */
	@Id
	private int id;
	private String firstName;
	private String department;
	private String workLocation;

	public Employee() {
	}

	public Employee(int id, String firstName, String department, String workLocation) {
		super();
		this.id = id;
		this.firstName = firstName;
		this.department = department;
		this.workLocation = workLocation;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", firstName=" + firstName + ", department=" + department + ", workLocation="
				+ workLocation + "]";
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public String getWorkLocation() {
		return workLocation;
	}

	public void setWorkLocation(String workLocation) {
		this.workLocation = workLocation;
	}

	/* Write parameterized constructor */

	/* Add getter and setter methods for all the properties */

}

////////////////////////////////////////////////
package com.stackroute.service;

import com.stackroute.exceptions.EmployeeAlreadyExistException;
import com.stackroute.exceptions.EmployeeNotFoundException;
import com.stackroute.model.Employee;
import org.springframework.stereotype.Service;

import java.util.List;


public interface EmployeeService {

    public List<Employee> getAll();
    public Employee getById(int id) throws EmployeeNotFoundException;
    public Employee addNew(Employee emp) throws EmployeeAlreadyExistException;
}
////////////////////////////////
package com.stackroute.service;

import com.stackroute.dao.EmployeeRepository;

import com.stackroute.exceptions.EmployeeAlreadyExistException;
import com.stackroute.exceptions.EmployeeNotFoundException;

import com.stackroute.model.Employee;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/* Annotate the class with @Service Annotation */
@Service
public class EmployeeServiceImpl implements EmployeeService {

	EmployeeRepository employeeRepository;

	/*
	 * Constructor based Autowiring should be implemented
	 */

	public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
		this.employeeRepository = employeeRepository;
	}

	/*
	 * This is method is used to get all the Employees
	 */
	@Override
	public List<Employee> getAll() {
		List<Employee> list = (List<Employee>) employeeRepository.findAll();
		return list;

	}

	/*
	 * This method is used to get an Employee by id. The method should throw
	 * EmployeeNotFoundException, if the employee with the given id is not found
	 */
	@Override
	public Employee getById(int id) throws EmployeeNotFoundException {
		Employee e = employeeRepository.findById(id).orElse(null);
		if (e == null) {
			throw new EmployeeNotFoundException("Employee Not found");

		}
		return e;

	}

	/*
	 * This method is used to save a new Employee. The method should throw
	 * EmployeeAlreadyExistException, if the new employee that we are trying save is
	 * already saved
	 */
	@Override
	public Employee addNew(Employee emp) throws EmployeeAlreadyExistException {
		if (employeeRepository.findById(emp.getId()).isPresent()) {
			throw new EmployeeAlreadyExistException("Employee already Exist");
		}
		return employeeRepository.save(emp);

	}

}


////////////////////////////////////////////////

package com.stackroute.dao;

import com.stackroute.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;

/*
* Annotate the interface with @Repository and @Transactional
* extend the interface with JPARepository
* */
@Repository
@Transactional
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
}
////////////////////////////////////////////////


package com.stackroute.controller;

import com.stackroute.dao.EmployeeRepository;
import com.stackroute.exceptions.EmployeeAlreadyExistException;
import com.stackroute.exceptions.EmployeeNotFoundException;

import com.stackroute.model.Employee;

import com.stackroute.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/* Annotate the class with @RestController and @RequestMapping */
@RestController
@RequestMapping(value = "/api/v1")
public class EmployeeController {

	EmployeeService employeeService;

	/*
	 * Constructor based Autowiring should be implemented
	 */

	public EmployeeController(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	/*
	 * Define a handler method to get all the Employees. This handler method should
	 * map to the URL "/employees". This method will return the List of employees in
	 * the response body with the Httpstatus OK.
	 */

	@GetMapping(value = "/employees")
	public ResponseEntity<List<Employee>> getAllHandler() {
		return new ResponseEntity<List<Employee>>(employeeService.getAll(), HttpStatus.OK);
	}

	/*
	 * Define a handler method to add a new Employee. This handler method should map
	 * to the URL "/employees". This method will return the saved employee in the
	 * response body with the Httpstatus CREATED, if the employee is saved
	 * successfully, else, returns the message "Employee already Exist" with the
	 * status CONFLICT.
	 */
	@PostMapping(value = "/employees")
	public ResponseEntity<?> addNewHandler(@RequestBody Employee emp) {
		try {
			Employee temp = employeeService.addNew(emp);
			return new ResponseEntity<Employee>(temp, HttpStatus.CREATED);
		} catch (EmployeeAlreadyExistException e) {
			return new ResponseEntity<String>("Employee already Exist", HttpStatus.CONFLICT);
		}

	}

	/*
	 * Define a handler method to add get an Employee by id. This handler method
	 * should map to the URL "/employees/{id}". This method will return the
	 * retreived employee in the response body with the Httpstatus OK, if the
	 * employee is found, else, returns the message "Employee Not found" with the
	 * status NOT_FOUND.
	 */
	@GetMapping(value = "/employees/{id}")
	public ResponseEntity<?> getByIdHandler(@PathVariable int id) {
		try {
			Employee e1 = employeeService.getById(id);
			return new ResponseEntity<Employee>(e1, HttpStatus.OK);
		} catch (EmployeeNotFoundException e) {
			return new ResponseEntity<String>("Employee Not found", HttpStatus.NOT_FOUND);
		}
	}
}
///////////////////////////////////////////
package com.stackroute.exceptions;

public class EmployeeAlreadyExistException extends Exception {
	public EmployeeAlreadyExistException() {
	}

	public EmployeeAlreadyExistException(String message) {
		super(message);
	}
}
//////////////////////////////////

resouces---application.properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.datasource.username=sa
spring.datasource.password=password

